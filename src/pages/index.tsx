import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { ChangeEvent, FormEvent, useState } from "react";
import styles from "../styles/Home.module.css";
import useClipboard from "react-use-clipboard";

const Home: NextPage = () => {
  const [url, setUrl] = useState("");
  const [time, setTime] = useState("");
  const [shortLink, setShortLink] = useState("");
  const [isCopied, setIsCopied] = useClipboard(shortLink, {
    successDuration: 2000,
  });

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    let expirationTime = parseInt(time);

    const res = await fetch("/api/shorten", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ url, expirationTime }),
    });
    const data = await res.json();
    console.log(data);
    setShortLink("http://localhost:3000/api/" + data.slug);
    setUrl("");
    setTime("");
  };

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    e.target.name === "url" ? setUrl(e.target.value) : setTime(e.target.value);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <form onSubmit={handleSubmit}>
          <label>Url</label>
          <input type="text" name="url" value={url} onChange={handleChange} />

          <label>Expiration time</label>
          <input type="text" name="time" value={time} onChange={handleChange} />
          <button>Shrink</button>
        </form>
      </div>

      <div>
        <div>
          Shortened Link:{" "}
          {shortLink && (
            <a href={shortLink} target="_blank" rel="noreferrer">
              {shortLink}
            </a>
          )}
        </div>
        <div
          style={{ width: 25, height: 25 }}
          role="button"
          onClick={setIsCopied}
        >
          <p>{isCopied && "copied"}</p>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            strokeWidth="2"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
            />
          </svg>
        </div>
      </div>
    </div>
  );
};

export default Home;
